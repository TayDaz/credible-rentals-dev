const mongoose = require("mongoose");

const {
	LOCAL,
	FACEBOOK,
	GOOGLE,
	TWITTER,
	INITIATED,
	PENDING,
	VERIFIED,
	SMS_OTP,
	EMAIL,
	GUEST,
	DEFAULT,
	RENTEE,
	RENTER,
	ADMIN,
	ROOT,
	INVALID,
	VALID,
	BLOCKED,
	BLACKLISTED,
	NULL,
	SOCIAL_MEDIA,
	VERIFICATION,
	SENT,
	USED,
	RESEND,
	NOT_INITIATED,
	UPDATE,
	HYUNDAI,
	TATA,
	MAHINDRA,
	SUZUKI,
	KIA,
	TOYOTA,
	SKODA,
	BMW,
	HONDA,
	FORD,
	AUDI,
	VOLKSWAGEN,
	RENAULT,
	MERCEDES_BENZ,
	JEEP,
	MG,
	NISSAN,
	JAGUAR,
	VOLVO,
	LAND_ROVER,
	LAMBORGHINI,
	PORSHE,
	MCLAREN,
	LEXUS,
	MINI,
	TESLA,
	ROLLS_ROYCE,
	ISUZU,
	DATSUN,
	FERRARI,
	CITROEN,
	BENTLEY,
	MITSUBISHI,
	MASERATI,
	BUGATTI,
	HAVAL,
	FORCE_MOTORS,
	ASTON_MARTIN,
	HATCHBACK,
	SEDAN,
	SUV,
	CROSSOVER,
	COUPE,
	CONVERTIBLE,
	MANUAL,
	AUTOMATIC,
	PETROL,
	DEISEL,
	PENDING_VERIFICATION,
	ACTIVE,
	INACTIVE,
	ELECTRIC,
	HYBRID,
} = require("../../../../constants");

const Schema = mongoose.Schema;

const CarAddSchema = new Schema(
	{
		addStatus: {
			type: String,
			enum: [PENDING, ACTIVE, INACTIVE, BLOCKED, BLACKLISTED],
		},
		userId: {
			type: String,
			required: true,
		},
		brand: {
			type: String,
			required: true,
			enum: [
				HYUNDAI,
				TATA,
				MAHINDRA,
				SUZUKI,
				KIA,
				TOYOTA,
				SKODA,
				BMW,
				HONDA,
				FORD,
				AUDI,
				VOLKSWAGEN,
				RENAULT,
				MERCEDES_BENZ,
				JEEP,
				MG,
				NISSAN,
				JAGUAR,
				VOLVO,
				LAND_ROVER,
				LAMBORGHINI,
				PORSHE,
				MCLAREN,
				LEXUS,
				MINI,
				TESLA,
				ROLLS_ROYCE,
				ISUZU,
				DATSUN,
				FERRARI,
				CITROEN,
				BENTLEY,
				MITSUBISHI,
				MASERATI,
				BUGATTI,
				HAVAL,
				FORCE_MOTORS,
				ASTON_MARTIN,
			],
		},
		model: {
			type: String,
			required: true,
		},
		year: {
			type: String,
			required: true,
		},
		average: {
			type: String,
			required: true,
		},
		type: {
			type: String,
			required: true,
			enum: [HATCHBACK, SEDAN, SUV, CROSSOVER, COUPE, CONVERTIBLE],
		},
		engine: {
			type: String,
			required: true,
		},
		transmission: {
			type: String,
			required: true,
			enum: [MANUAL, AUTOMATIC],
		},
		fuelType: {
			type: String,
			required: true,
			enum: [PETROL, DEISEL, ELECTRIC, HYBRID],
		},
		seatingCapacity: {
			type: Number,
			required: true,
			min: 1,
		},
		price: {
			type: Number,
			required: true,
			min: 1,
		},
		availableFrom: {
			type: Date,
			required: true,
		},
		photos: {
			type: [String],
			required: true,
		},
	},
	{
		timestamps: true,
	}
);

const CarAddModel = mongoose.model("carAdd", CarAddSchema);

module.exports = CarAddModel;
